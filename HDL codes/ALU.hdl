// This file is part of the materials accompanying the book 
// "The Elements of Computing Systems" by Nisan and Schocken, 
// MIT Press. Book site: www.idc.ac.il/tecs
// File name: projects/02/ALU.hdl

/**
 * The ALU.  Computes a pre-defined set of functions out = f(x,y)
 * where x and y are two 16-bit inputs. The function f is selected 
 * by a set of 6 control bits denoted zx, nx, zy, ny, f, no.
 * The ALU operation can be described using the following pseudocode:
 *     if zx=1 set x = 0       // 16-bit zero constant
 *     if nx=1 set x = !x      // Bit-wise negation
 *     if zy=1 set y = 0       // 16-bit zero constant
 *     if ny=1 set y = !y      // Bit-wise negation
 *     if f=1  set out = x + y // Integer 2's complement addition
 *     else    set out = x & y // Bit-wise And
 *     if no=1 set out = !out  // Bit-wise negation
 *
 * In addition to computing out, the ALU computes two 1-bit outputs:
 *     if out=0 set zr = 1 else zr = 0 // 16-bit equality comparison
 *     if out<0 set ng = 1 else ng = 0 // 2's complement comparison
 */

CHIP ALU {
  IN  // 16-bit inputs:
      x[16], y[16],
      // Control bits:
      zx, // Zero the x input
      nx, // Negate the x input
      zy, // Zero the y input
      ny, // Negate the y input
      f,  // Function code: 1 for add, 0 for and
      no; // Negate the out output

  OUT // 16-bit output
      out[16],
      // ALU output flags
      zr, // 1 if out=0, 0 otherwise
      ng; // 1 if out<0, 0 otherwise

  PARTS:
  // Zero x if necessary
  Mux16(a=x, b=false, sel=zx, out=zeroedX);

  // Negate x if necessary
  ConditionalNot16(in=zeroedX, sel=nx, out=negatedX);

  // Zero y if necessary
  Mux16(a=y, b=false, sel=zy, out=zeroedY);

  // Negate y if necessary
  ConditionalNot16(in=zeroedY, sel=ny, out=negatedY);

  // Perform (x + y) if f=1, otherwise (x & y)
  And16(a=negatedX, b=negatedY, out=andXY);
  Add16(a=negatedX, b=negatedY, out=sumXY);
  Mux16(a=andXY, b=sumXY, sel=f, out=functionPerformed);

  // Negate output if necessary, and also set ng ALU output flag
  // Send output to both "out" and "output", as we must still calculate the zr ALU output flag, and
  // "out" cannot be used as input pin for another chip.
  // Idea taken from http://svn2.assembla.com/svn/baraksch/nand2tet/02/ALU.hdl
  ConditionalNot16(in=functionPerformed, sel=no, out=out, out=output, out[15]=ng);

  // Set zr ALU output flag
  Or16Way(in=output, out=outIsNotZero);
  Not(in=outIsNotZero, out=zr);
}
