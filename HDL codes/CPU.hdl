// This file is part of the materials accompanying the book 
// "The Elements of Computing Systems" by Nisan and Schocken, 
// MIT Press. Book site: www.idc.ac.il/tecs
// File name: projects/05/CPU.hdl

/**
 * The Central Processing unit (CPU).
 * Consists of an ALU and a set of registers, designed to fetch and 
 * execute instructions written in the Hack machine language.
 * In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM=0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time unit. If reset=1 then the 
 * CPU jumps to address 0 (i.e. sets pc=0 in next time unit) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {
  IN  inM[16],         // M value input  (M = contents of RAM[A])
      instruction[16], // Instruction for execution
      reset;           // Signals whether to re-start the current
                       // program (reset=1) or continue executing
                       // the current program (reset=0).

  OUT outM[16],        // M value output
      writeM,          // Write into M? 
      addressM[15],    // Address in data memory (of M)
      pc[15];          // address of next instruction

  PARTS:
  // Declare primary components
  ALU(x=outD, y=inY,
      zx=instruction[11], nx=instruction[10], zy=instruction[9], ny=instruction[8],
      f=instruction[7], no=instruction[6],
      zr=resultIsZero, ng=resultIsNegative,
      out=outAlu, out=outM);
  PC(in=outA, load=doJump, inc=true, reset=reset, out[0..14]=pc, out[15]=false);
  ARegister(in=inA, load=loadA, out[0..14]=addressM, out=outA);
  DRegister(in=outAlu, load=loadD, out=outD);

  // Determine whether to write to A, D, and M registers
  And(a=instruction[15], b=instruction[3], out=writeM);
  And(a=instruction[15], b=instruction[4], out=loadD);
  Not(in=instruction[15], out=isAinstruction);
  Or(a=isAinstruction, b=instruction[5], out=loadA);

  // Determine whether to feed M or D into ALU's y-input
  Mux16(a=outA, b=inM, sel=instruction[12], out=inY);

  // Determine input to A register based on whether instruction is C- or A-instruction
  Mux16(sel=instruction[15], out=inA,
        a[0..14]=instruction[0..14], a[15]=false,
        b=outAlu);

  // Jump if jump flags correspond to ALU's output
  Or(a=resultIsNegative, b=resultIsZero, out=resultIsNegativeOrZero);
  Not(in=resultIsNegativeOrZero, out=resultIsPositive);
  And(a=instruction[0], b=resultIsPositive, out=doJumpPositive);
  And(a=instruction[1], b=resultIsZero, out=doJumpZero);
  And(a=instruction[2], b=resultIsNegative, out=doJumpNegative);
  Or(a=doJumpNegative, b=doJumpZero, out=doJumpNegOrZero);
  Or(a=doJumpNegOrZero, b=doJumpPositive, out=doJumpNegOrZeroOrPositive);
  // Only jump if instruction is C-instruction, not A-instruction
  And(a=doJumpNegOrZeroOrPositive, b=instruction[15], out=doJump);
}
